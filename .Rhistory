setwd("C:/Users/User/Desktop/INAB/lineagespot")
library(vcfR)
library(data.table)
library(stringr)
library(seqinr)
library(stringdist)
base::rm(list = ls())
bases = base::c("A", "G", "C", "T", "-")
reference.path = "ref/NC_045512.fasta"
vcf.path = "vcf-files/Sewage-L2_S10_L001_freebayes.ann.vcf"
decision.rules.path = "ref/decision_tree_rules.txt"
nreads = 490549
utils::download.file(
url = "https://raw.githubusercontent.com/cov-lineages/pangoLEARN/master/pangoLEARN/data/decision_tree_rules.txt",
destfile = decision.rules.path,
method = "curl"
)
start.time = base::Sys.time()
ref = seqinr::read.fasta(reference.path)
ref = base::as.character(ref[[1]])
ref = data.table::data.table(pos = 1:base::length(ref),
logic.expr = "==",
base = stringr::str_to_upper(ref))
ref$whole.expr = base::paste(ref$pos,
ref$logic.expr,
"'", ref$base, "'",
sep = "")
vcf.file = vcfR::read.vcfR(vcf.path, verbose = FALSE)
fix = data.table::as.data.table(vcf.file@fix)
gt.tidy = vcfR::extract_gt_tidy(vcf.file, verbose = FALSE)
gt.ad = stringr::str_split(gt.tidy$gt_AD, ",", simplify = TRUE)
gt.ad = data.table::as.data.table(gt.ad)
Avg.DP = base::mean(gt.tidy$gt_DP)
gt.ad$dp = gt.tidy$gt_DP
for(i in 1:ncol(gt.ad)) {
gt.ad[[i]] = base::as.numeric(gt.ad[[i]])
}
gt.ad$pos = fix$POS
excluded.pos = gt.ad[which(gt.ad[[1]] == 0), ]$pos
ref = ref[which(!(ref$pos %in% as.numeric(excluded.pos))), ]
base::rm(vcf.file, reference.path)
fix = fix[base::which(fix$ALT != "<*>"), ]
fix$ALT = stringr::str_remove_all(fix$ALT, "\\,<\\*>")
ALT = stringr::str_split(fix$ALT, ",", simplify = TRUE)
out = base::list()
for(i in 1:base::ncol(ALT)) {
who = base::which(ALT[,i] != "")
out[[i]] = data.table::data.table(pos = fix[who, ]$POS,
ref = fix[who, ]$REF,
alt = ALT[who, i],
ad = gt.ad[who, ][[i + 1]],
dp = gt.ad[who, ]$dp)
}
fix = data.table::rbindlist(out)
base::rm(out, ALT, i, who)
comp = base::list()
exclude = c()
for(i in 1:base::nrow(fix)){
ref.len = stringr::str_length(fix[i,]$ref)
alt.len = stringr::str_length(fix[i,]$alt)
if((ref.len == 1) & (alt.len == 1)) {
temp = data.table::data.table(pos = fix[i,]$pos,
logic.expr = "==",
base = fix[i,]$alt)
temp$whole.expr = base::paste(temp$pos,
temp$logic.expr,
"'", temp$base, "'",
sep = "")
temp$ad = fix[i,]$ad
temp$dp = fix[i,]$dp
comp[[i]] = temp
} else if((ref.len != 1) & (alt.len == 1)) {
ref.split = stringr::str_split(fix[i,]$ref, "", simplify = TRUE)
temp = data.table::data.table(pos = c(base::as.numeric(fix[i,]$pos), base::as.numeric(fix[i,]$pos) + 1:(ref.len - 1)),
logic.expr = "==",
base = c(fix[i,]$alt, base::rep("-", ref.len - 1)))
temp$whole.expr = base::paste(temp$pos,
temp$logic.expr,
"'", temp$base, "'",
sep = "")
temp$ad = fix[i,]$ad
temp$dp = fix[i,]$dp
comp[[i]] = temp
} else if((ref.len != 1) & (alt.len != 1) & (ref.len == alt.len)) {
ref.split = stringr::str_split(fix[i,]$ref, "", simplify = TRUE)
alt.split = stringr::str_split(fix[i,]$alt, "", simplify = TRUE)
ref.split = base::as.vector(ref.split)
alt.split = base::as.vector(alt.split)
diff = stringdist::stringdist(ref.split, alt.split)
who = base::which(diff != 0)
temp = data.table::data.table(pos = c(base::as.numeric(fix[i,]$pos) + who - 1),
logic.expr = "==",
base = alt.split[who])
temp$whole.expr = base::paste(temp$pos,
temp$logic.expr,
"'", temp$base, "'",
sep = "")
temp$ad = fix[i,]$ad
temp$dp = fix[i,]$dp
comp[[i]] = temp
} else if((ref.len != 1) & (alt.len != 1) & (ref.len > alt.len)) {
ref.split = stringr::str_split(fix[i,]$ref, "", simplify = TRUE)
alt.split = stringr::str_split(fix[i,]$alt, "", simplify = TRUE)
ref.split = base::as.vector(ref.split)
alt.split = base::as.vector(alt.split)
alt.j = 1
gaps = c()
for(j in 1:base::length(ref.split)) {
if(ref.split[j] != alt.split[alt.j]) {
gaps = base::c(gaps,
base::as.numeric(fix[i,]$pos) + j - 1)
} else {
alt.j = base::ifelse((alt.j + 1) > alt.len, alt.len, alt.j + 1)
}
}
if(base::is.null(gaps)) {
gaps = base::as.numeric(fix[i,]$pos) + 1
}
temp = data.table::data.table(pos = gaps,
logic.expr = "==",
base = "-")
temp$whole.expr = base::paste(temp$pos,
temp$logic.expr,
"'", temp$base, "'",
sep = "")
temp$ad = fix[i,]$ad
temp$dp = fix[i,]$dp
comp[[i]] = temp
} else if((ref.len != 1) & (alt.len != 1) & (ref.len < alt.len)) {
ref.split = stringr::str_split(fix[i,]$ref, "", simplify = TRUE)
alt.split = stringr::str_split(fix[i,]$alt, "", simplify = TRUE)
ref.split = base::as.vector(ref.split)
alt.split = base::as.vector(alt.split)
ref.j = ref.len
insertions = base::c()
for(j in base::length(alt.split):1) {
if(alt.split[j] != ref.split[ref.j]) {
insertions = base::c(insertions, j)
} else {
ref.j = base::ifelse((ref.j - 1) < 0, 1, ref.j - 1)
}
}
if(length(insertions) == 1) {
temp = data.table::data.table(pos = base::c(as.numeric(fix[i,]$pos) + insertions - 1),
logic.expr = "==",
base = alt.split[insertions])
temp$whole.expr = base::paste(temp$pos,
temp$logic.expr,
"'", temp$base, "'",
sep = "")
temp$ad = fix[i,]$ad
temp$dp = fix[i,]$dp
comp[[i]] = temp
} else {
exclude = base::c(exclude, i)
}
} else {
exclude = base::c(exclude, i)
}
}
comp = data.table::rbindlist(comp)
fix = comp
base::rm(list = base::setdiff(base::ls(),
base::c("fix", "ref", "bases", "start.time", "decision.rules.path", "vcf.path", "nreads", "Avg.DP")))
fix$pos = as.numeric(fix$pos)
who = match(ref$pos, fix$pos)
ref$ad = fix[who, ]$dp - fix[who, ]$ad
ref$dp = fix[who, ]$dp
ref[which(is.na(ref$dp)), ]$ad = 0
ref[which(is.na(ref$dp)), ]$dp = 0
ref$source = "ref"
fix$source = "var"
fix = base::rbind(ref, fix)
fix$pos = base::as.numeric(fix$pos)
fix = fix[base::order(fix$pos), ]
one.run = function(x, bases) {
out = data.table::data.table(pos = base::as.numeric(x[1]),
logic.expr = "!=",
base = bases[!(bases %in% x[3])])
out$whole.expr = base::paste(out$pos,
out$logic.expr,
"'", out$base, "'",
sep = "")
out$ad = x[5]
out$dp = x[6]
out$source = x[7]
base::return(out)
}
comp = base::apply(fix, 1, one.run, bases = bases)
comp = data.table::rbindlist(comp)
comp = base::rbind(fix, comp)
comp = unique(comp)
comp = comp[order(comp$pos), ]
comp$ad = as.numeric(comp$ad)
comp$dp = as.numeric(comp$dp)
base::rm(bases, one.run, fix, ref)
decisions = data.table::fread(decision.rules.path, header = FALSE, sep = "\t", skip = 1)
rules = stringr::str_split(decisions$V2, ",", simplify = TRUE)
rules = data.table::as.data.table(rules)
out = base::list()
k = 1
for(i in 1:(base::ncol(rules))) {
who = rules[[i]] == ""
if(base::length(which(who)) > 0){
temp = decisions[base::which(who), ]
# temp$total = rules[base::which(who), ]$n.rules
temp$tree.overlap = i - 1
# temp$total.overlap = rules[base::which(who), ]$n.totalOverlap
# temp$total.avg.ad = rules[base::which(who), ]$avg.ad
# temp$avg.dp = rules[base::which(who), ]$avg.dp
out[[k]] = temp
k = k + 1
decisions = decisions[base::which(!who), ]
rules = rules[base::which(!who), ]
}
if(base::nrow(decisions) > 0) {
who = rules[[i]] %in% comp$whole.expr
temp = decisions[base::which(!who), ]
if(nrow(temp) > 0) {
# temp$total = rules[base::which(!who), ]$n.rules
temp$tree.overlap = i - 1
# temp$total.overlap = rules[base::which(!who), ]$n.totalOverlap
# temp$avg.ad = rules[base::which(!who), ]$avg.ad
# temp$avg.dp = rules[base::which(!who), ]$avg.dp
out[[k]] = temp
k = k + 1
}
decisions = decisions[base::which(who), ]
rules = rules[base::which(who), ]
} else {
break
}
}
out = data.table::rbindlist(out)
one.run = function(x, expr, AD, DP, source) {
rules = stringr::str_split(x[2], ",", simplify = TRUE)
rules = as.vector(rules)
tree.who = base::which(expr %in% rules[0:as.integer(x[3])])
total.who = base::which(expr %in% rules)
total.who.var = base::which(expr[which(source == "var")] %in% rules)
tree.AD = AD[tree.who]
tree.AD = tree.AD[which(tree.AD != 0)]
total.AD = AD[total.who]
total.AD = total.AD[which(total.AD != 0)]
total.DP = DP[total.who]
total.DP = total.DP[which(total.DP != 0)]
expr.var = unique(expr[total.who.var])
expr = unique(expr[total.who])
stats = data.table::data.table(total.overlap = base::length(expr),
total.overlap.var = base::length(expr.var),
total.len = base::length(rules),
tree.avg.ad = base::mean(tree.AD),
total.avg.ad = base::mean(total.AD),
total.avg.dp = base::mean(total.DP),
total.sum.ad = base::sum(total.AD),
total.sum.dp = base::sum(total.DP))
base::return(stats)
}
rules.stats = base::apply(out, 1, one.run, comp$whole.expr, comp$ad, comp$dp, comp$source)
rules.stats = data.table::rbindlist(rules.stats)
out$total.overlap = rules.stats$total.overlap
out$total.overlap.var = rules.stats$total.overlap.var
out$total = rules.stats$total.len
out$tree.avg.ad = rules.stats$tree.avg.ad
out$total.avg.ad = rules.stats$total.avg.ad
out$total.avg.dp = rules.stats$total.avg.dp
out$total.sum.ad = rules.stats$total.sum.ad
out$total.sum.dp = rules.stats$total.sum.dp
out$tree.ratio = out$tree.overlap / out$total
out$total.ratio = out$total.overlap / out$total
out$total.ratio.var = out$total.overlap.var / out$total
out$avg.dp = Avg.DP
out$total.run.reads = nreads
out[which(is.na(out$tree.avg.ad)), ]$tree.avg.ad = 0
out[which(is.na(out$total.avg.ad)), ]$total.avg.ad = 0
out[which(is.na(out$total.avg.dp)), ]$total.avg.dp = 0
out[which(is.na(out$total.sum.ad)), ]$total.sum.ad = 0
out[which(is.na(out$total.sum.dp)), ]$total.sum.dp = 0
out = out[base::order(out$tree.ratio, out$total.ratio, decreasing = TRUE), ]
base::colnames(out) = base::c("Lineage", "Rules",
"Tree.Overlap", "Total.Overlap", "Total.Overlap.Var", "Total",
"Tree.Avg.AD", "Total.Avg.AD", "Total.Avg.DP",
"Total.Sum.AD", "Total.Sum.DP",
"Tree.Ratio", "Total.Ratio", "Total.Ratio.Var",
"Avg.DP", "Total.Run.Reads")
out = out[,c("Lineage",
"Rules",
"Total",
"Tree.Overlap",
"Total.Overlap",
"Total.Overlap.Var",
"Tree.Ratio",
"Total.Ratio",
"Total.Ratio.Var",
"Tree.Avg.AD",
"Total.Avg.AD",
"Total.Avg.DP",
"Total.Sum.AD",
"Total.Sum.DP",
"Avg.DP",
"Total.Run.Reads")]
out$Sig = out$Total.Sum.AD / out$Total.Sum.DP
out[which(is.na(out$Sig)), ]$Sig = 0
end.time = base::Sys.time()
utils::write.table(out,
paste(stringr::str_replace(vcf.path, ".vcf", "-lineagespot.tsv"), sep = ""),
row.names = FALSE,
quote = FALSE,
sep = "\t")
base::rm(list = base::setdiff(base::ls(),
base::c("out", "comp", "decisions", "start.time", "end.time")))
rm(list = ls())
library(openxlsx)
# File to collapse
analysis_output_file <- 'vcf-files/Sewage-L2_S10_L001_freebayes.ann-lineagespot.tsv'
# ----------------- Functions --------------------------------------------------
collapse_lineages_table <- function(lineages_pred){
lineages <- unique(lineages_pred$Lineage)
lineages_new <- list()
for (lin in lineages){
# lin_positions <- which(lineages_pred$Lineage == lin)
lin_table <- lineages_pred[which(lineages_pred$Lineage == lin), ]
# pos_of_max <- which(lin_table$Total.Ratio == max(lin_table$Total.Ratio))
mean_tree_ratio <- mean(lin_table$Tree.Ratio)
mean_total_ratio <- mean(lin_table$Total.Ratio)
mean_total_ratio_var <- mean(lin_table$Total.Ratio.Var)
mean_tree_av_ad <- mean(lin_table$Tree.Avg.AD)
mean_total_av_ad<- mean(lin_table$Total.Avg.AD)
mean_sig = mean(lin_table$Sig)
lineages_new[[lin]] <- data.table::data.table("Lineage" = lin,
"Mean.Tree.Ratio" = mean_tree_ratio,
"Mean.Total.Ratio" = mean_total_ratio,
"Mean.Total.Ratio.Var" = mean_total_ratio_var,
"Mean.Tree.Av.AD" = mean_tree_av_ad,
"Mean.Total.Av.AD" = mean_total_av_ad,
"Mean.Sig" = mean_sig)
}
# lineages_new <- as.data.frame(lineages_new)
# colnames(lineages_new) <- c()
lineages_new = data.table::rbindlist(lineages_new)
# lineages_new <- lineages_new[order(lineages_new$Max.Total.Ratio, decreasing = TRUE),]
# row.names(lineages_new) <- 1:nrow(lineages_new)
return(lineages_new)
}
add_columns_to_initial_matrix <- function(lineages_pred, lineages_collapsed){
lineages_pred$Max.Tree.Ratio <- 0
lineages_pred$Max.Total.Ratio <- 0
lineages_pred$Max.Tree.Av.AD <- 0
lineages_pred$Max.Total.Av.AD <- 0
lineages_pred$Tree.Av.Av.AD <- 0
lineages_pred$Total.Av.Av.AD <- 0
lins <- lineages_collapsed$Lineage
pos <- 1
for (lin in lins){
lin_positions <- which(lineages_pred$Lineage == lin)
lineages_pred[lin_positions,]$Max.Tree.Ratio <- lineages_collapsed[pos,]$Max.Tree.Ratio
lineages_pred[lin_positions,]$Max.Total.Ratio <- lineages_collapsed[pos,]$Max.Total.Ratio
lineages_pred[lin_positions,]$Max.Tree.Av.AD <- lineages_collapsed[pos,]$Max.Tree.Av.AD
lineages_pred[lin_positions,]$Max.Total.Av.AD <- lineages_collapsed[pos,]$Max.Total.Av.AD
lineages_pred[lin_positions,]$Tree.Av.Av.AD <- lineages_collapsed[pos,]$Tree.Av.Av.AD
lineages_pred[lin_positions,]$Total.Av.Av.AD <- lineages_collapsed[pos,]$Total.Av.Av.AD
# Change total avg ad
pos <- pos + 1
}
return(lineages_pred)
}
# Import
lineages_pred <- read.csv(analysis_output_file, sep = '\t')
# Filter lineages based on thresholds
lineages_pred <- lineages_pred[which(lineages_pred$Total.Overlap.Var != 0), ]
# Collapse
lineages_collapsed <- collapse_lineages_table(lineages_pred)
# Add new columns to initial table
lineages_pred <- add_columns_to_initial_matrix(lineages_pred, lineages_collapsed )
utils::write.table(lineages_collapsed,
file = stringr::str_replace(analysis_output_file, ".tsv", "-collapsed.tsv"),
row.names = FALSE,
quote = FALSE,
sep = "\t")
rm(list = ls())
library(openxlsx)
# File to collapse
analysis_output_file <- 'vcf-files/L1_S22_L001_freebayes.ann-lineagespot.tsv'
# ----------------- Functions --------------------------------------------------
collapse_lineages_table <- function(lineages_pred){
lineages <- unique(lineages_pred$Lineage)
lineages_new <- list()
for (lin in lineages){
# lin_positions <- which(lineages_pred$Lineage == lin)
lin_table <- lineages_pred[which(lineages_pred$Lineage == lin), ]
# pos_of_max <- which(lin_table$Total.Ratio == max(lin_table$Total.Ratio))
mean_tree_ratio <- mean(lin_table$Tree.Ratio)
mean_total_ratio <- mean(lin_table$Total.Ratio)
mean_total_ratio_var <- mean(lin_table$Total.Ratio.Var)
mean_tree_av_ad <- mean(lin_table$Tree.Avg.AD)
mean_total_av_ad<- mean(lin_table$Total.Avg.AD)
mean_sig = mean(lin_table$Sig)
lineages_new[[lin]] <- data.table::data.table("Lineage" = lin,
"Mean.Tree.Ratio" = mean_tree_ratio,
"Mean.Total.Ratio" = mean_total_ratio,
"Mean.Total.Ratio.Var" = mean_total_ratio_var,
"Mean.Tree.Av.AD" = mean_tree_av_ad,
"Mean.Total.Av.AD" = mean_total_av_ad,
"Mean.Sig" = mean_sig)
}
# lineages_new <- as.data.frame(lineages_new)
# colnames(lineages_new) <- c()
lineages_new = data.table::rbindlist(lineages_new)
# lineages_new <- lineages_new[order(lineages_new$Max.Total.Ratio, decreasing = TRUE),]
# row.names(lineages_new) <- 1:nrow(lineages_new)
return(lineages_new)
}
add_columns_to_initial_matrix <- function(lineages_pred, lineages_collapsed){
lineages_pred$Max.Tree.Ratio <- 0
lineages_pred$Max.Total.Ratio <- 0
lineages_pred$Max.Tree.Av.AD <- 0
lineages_pred$Max.Total.Av.AD <- 0
lineages_pred$Tree.Av.Av.AD <- 0
lineages_pred$Total.Av.Av.AD <- 0
lins <- lineages_collapsed$Lineage
pos <- 1
for (lin in lins){
lin_positions <- which(lineages_pred$Lineage == lin)
lineages_pred[lin_positions,]$Max.Tree.Ratio <- lineages_collapsed[pos,]$Max.Tree.Ratio
lineages_pred[lin_positions,]$Max.Total.Ratio <- lineages_collapsed[pos,]$Max.Total.Ratio
lineages_pred[lin_positions,]$Max.Tree.Av.AD <- lineages_collapsed[pos,]$Max.Tree.Av.AD
lineages_pred[lin_positions,]$Max.Total.Av.AD <- lineages_collapsed[pos,]$Max.Total.Av.AD
lineages_pred[lin_positions,]$Tree.Av.Av.AD <- lineages_collapsed[pos,]$Tree.Av.Av.AD
lineages_pred[lin_positions,]$Total.Av.Av.AD <- lineages_collapsed[pos,]$Total.Av.Av.AD
# Change total avg ad
pos <- pos + 1
}
return(lineages_pred)
}
# Import
lineages_pred <- read.csv(analysis_output_file, sep = '\t')
# Filter lineages based on thresholds
lineages_pred <- lineages_pred[which(lineages_pred$Total.Overlap.Var != 0), ]
# Collapse
lineages_collapsed <- collapse_lineages_table(lineages_pred)
# Add new columns to initial table
lineages_pred <- add_columns_to_initial_matrix(lineages_pred, lineages_collapsed )
utils::write.table(lineages_collapsed,
file = stringr::str_replace(analysis_output_file, ".tsv", "-collapsed.tsv"),
row.names = FALSE,
quote = FALSE,
sep = "\t")
library(readr)
library(data.table)
library(stringr)
#the path of the folder with all the files to be compared
input.folder <- "vcf-files"
files <- list.files(path = input.folder,pattern = "tsv")
files <- files[-which(str_detect(files,"collapsed"))]
#create output folder
outputs <- "vcf-files/Outputs_compared"
dir.create(outputs)
files.list <- list()
total <- read_tsv(paste0(input.folder,"/",files[1]))[,1:3]
total  <-  total[order(total$Lineage, decreasing = F),]
#read and combine files
for (i in c(1:length(files))){
one.file <- read_tsv(paste0(input.folder,"/",files[i]))
files.list[[i]] <- one.file
one.file <- one.file[,c("Tree.Overlap", "Total.Overlap" )]
colnames(one.file) <- paste0(colnames(one.file),"_",files[i])
total <- cbind(total, one.file)
}
num.files <- length(files)
colnames(total) <- str_remove_all(colnames(total),".tsv")
iter <- seq(4,(2*num.files+2),2)
#compare files
stats.table <- data.table(files = character(),
num.differences = numeric(),
max.abs.tree.dif = numeric(),
max.abs.total.dif = numeric())
data.graphs <- list()
names.list <- c()
k <- 1
for (i in iter[1:length(iter)-1]){
for (j in seq((i+2),(2*num.files+2),2)){
one.table <- total[,c(1:3,i, i+1, j, j+1)]
filename1 <- str_remove(colnames(total)[i],"Tree.Overlap_")
filename2 <- str_remove(colnames(total)[j],"Tree.Overlap_")
tree.dif.name <- paste0("Dif.Tree.Overlap_",filename1,"_",filename2)
total.dif.name <- paste0("Dif.Total.Overlap_",filename1,"_",filename2)
abs.tree.name <- paste0("Abs.",tree.dif.name)
abs.total.name <- paste0("Abs.",total.dif.name)
#tree.dif <- total[,i]-total[,j]
abs.tree.dif <- abs(total[,i]-total[,j])
#total.dif <- total[,i+1]-total[,j+1]
abs.total.dif <- abs(total[,i+1]-total[,j+1])
one.table <- cbind(one.table,abs.tree.dif ,abs.total.dif )
data.graphs[[k]] <- one.table
names.list <- c(names.list,paste0(filename1,"_",filename2))
k <-k+1
one.table <- one.table[which(one.table[,9] != 0),]
colnames(one.table) <- c(colnames(total)[c(1:3,i, i+1, j, j+1)],
abs.tree.name ,abs.total.name)
one.table <- one.table[order(one.table[,9],decreasing = T),]
if (nrow(one.table)>0) {
write.table(one.table, paste0(outputs,"/differences_",filename1,"_",filename2,".csv"), sep = "\t", row.names = F)
}
stats.table <- rbind(stats.table, data.table(files = paste0(filename1,"_", filename2),
num.differences = nrow(one.table),
max.abs.tree.dif = max(one.table[,8]),
max.abs.total.dif = max(one.table[,9])))
}
}
write.table(stats.table,paste0(outputs,"/info for all the diffeneces.csv"), sep = "\t", row.names = F)
names(data.graphs) <- names.list
names(files.list) <- files
